<style>
  .product-media-container {
    display: flex;
    max-width: 100%;
  }

  .product-thumbnails {
    display: flex;
    flex-direction: column;
    gap: 8px;
    flex-shrink: 0;
    position: relative;
    max-height: 600px;
    overflow: hidden;
  }

  .thumbnails-container {
    display: flex;
    flex-direction: column;
    gap: 8px;
    transition: transform 0.3s ease;
    overflow: visible;
  }

  .thumbnail-scroll-btn {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    width: 30px;
    height: 30px;
    background: rgba(255, 255, 255, 0.9);
    border: 1px solid #ddd;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    z-index: 10;
    transition: all 0.3s ease;
    opacity: 0;
    pointer-events: none;
  }

  .thumbnail-scroll-btn.visible {
    opacity: 1;
    pointer-events: auto;
  }

  .thumbnail-scroll-btn:hover {
    background: rgba(255, 255, 255, 1);
    border-color: #999;
    transform: translateX(-50%) scale(1.1);
  }

  .scroll-up {
    top: -5px;
  }

  .scroll-down {
    bottom: -5px;
  }

  .thumbnail-item {
    width: 90px;
    height: 90px;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    border: 1px solid transparent;
    transition: all 0.3s ease;
    position: relative;
  }

  .thumbnail-item.active {
    border-color: #eee;
  }

  .thumbnail-item:hover {
    border-color: #666;
  }

  .thumbnail-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .product-main-media {
    flex: 1;
    position: relative;
    background: #f8f8f8;
    aspect-ratio: 1 / 1;
  }

  .main-media-item {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .main-media-item.active {
    opacity: 1;
  }

  .main-media-item img,
  .main-media-item video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .main-media-item video {
    background: #000;
  }

  .main-media-item video::-webkit-media-controls-panel {
    background-color: rgba(0, 0, 0, 0.8);
  }

  .main-media-item video::-webkit-media-controls-fullscreen-button {
    display: block;
  }

  .navigation-arrows {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 40px;
    transition: all 0.3s ease;
    z-index: 10;
    font-weight: 400;
  }

  .nav-prev {
    left: -40px;
  }

  .nav-next {
    right: -50px;
  }

  .navigation-arrows:hover {
    transform: translateY(-50%) scale(1.1);
  }

  @media (max-width: 768px) {
    .product-media-container {
      flex-direction: column-reverse;
    }

    .product-thumbnails {
      flex-direction: row;
      width: 100%;
      justify-content: center;
      gap: 8px;
      padding: 16px 0;
      overflow-x: auto;
      max-height: none;
    }

    .thumbnails-container {
      flex-direction: row;
    }

    .thumbnail-scroll-btn {
      display: none;
    }

    .thumbnail-item {
      width: 60px;
      height: 60px;
      flex-shrink: 0;
    }

    .product-main-media {
      aspect-ratio: 1;
    }

    .product-features {
      grid-template-columns: 1fr;
      gap: 2px;
    }

    .quantity-and-cart {
      flex-direction: column;
      align-items: stretch;
    }
  }

  /* Product Info Styles */
  .stars {
    color: #ed4026;
  }

  .star {
    font-size: 18px;
  }

  .star.filled {
    color: #;
  }

  .variant-btn {
    font-size: 14px;
    font-weight: 500;
    text-align: center;
    background-color: white;
    border: 1px solid transparent;
    height: 48px;
    justify-content: center;
    letter-spacing: 0;
    line-height: 2rem;
    padding: 2px 22px 0;
    border-radius: 9999px;
    cursor: pointer;
  }

  .variant-btn:hover {
    color: #ed4026;
  }

  .variant-btn.active {
    border-color: #000;
  }

  .feature-icon {
    font-size: 24px;
  }

  .benefits-list li {
    font-size: 14px;
    line-height: 1.4;
  }

  /* Sticky Product Info */
  .product-info {
    position: sticky;
    top: 2rem;
    height: fit-content;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
  }

  /* Hide scrollbar for product info */
  .product-info::-webkit-scrollbar {
    width: 0px;
    background: transparent;
  }

  .product-info {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  @media (max-width: 1023px) {
    .product-info {
      position: static;
      max-height: none;
      overflow-y: visible;
    }
  }
</style>

<section class="product-main py-8">
  <div class="container mx-auto px-4">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:grid-cols-[55%_45%]">
      <!-- Product Media Gallery -->
      <div class="product-media">
        <div class="product-media-container gap-8">
          <!-- Thumbnails -->
          <div class="product-thumbnails">
            <!-- Scroll up button -->
            <button class="thumbnail-scroll-btn scroll-up" onclick="scrollThumbnails('up')">
              <i class="fas fa-chevron-up"></i>
            </button>

            <div class="thumbnails-container" id="thumbnailsContainer">
              {% for media in product.media limit: 8 %}
                <div
                  class="thumbnail-item {% if forloop.first %}active{% endif %}"
                  data-media-index="{{ forloop.index0 }}"
                  onclick="showMedia({{ forloop.index0 }})"
                >
                  {% case media.media_type %}
                    {% when 'image' %}
                      <img
                        src="{{ media | image_url: width: 160 }}"
                        alt="{{ media.alt | escape }}"
                        width="80"
                        height="80"
                        loading="lazy"
                      >
                    {% when 'video' %}
                      <img
                        src="{{ media.preview_image | image_url: width: 160 }}"
                        alt="{{ media.alt | escape }}"
                        width="80"
                        height="80"
                        loading="lazy"
                      >
                    {% else %}
                      <img
                        src="{{ media.preview_image | image_url: width: 160 }}"
                        alt="{{ media.alt | escape }}"
                        width="80"
                        height="80"
                        loading="lazy"
                      >
                  {% endcase %}
                </div>
              {% endfor %}
            </div>

            <!-- Scroll down button -->
            <button class="thumbnail-scroll-btn scroll-down" onclick="scrollThumbnails('down')">
              <i class="fas fa-chevron-down"></i>
            </button>
          </div>

          <!-- Main Media Display -->
          <div class="product-main-media mx-10">
            <!-- Navigation Arrows -->
            {% if product.media.size > 1 %}
              <button class="navigation-arrows nav-prev" onclick="previousMedia()">
                <svg width="31" height="36" viewBox="0 0 31 36" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M18.3827 0.889028C18.7003 1.20663 18.7003 1.72156 18.3827 2.03915L2.49328 17.9286L18.3827 33.818C18.7003 34.1356 18.7003 34.6505 18.3827 34.9681C18.0651 35.2857 17.5502 35.2857 17.2326 34.9681L0.768089 18.5036C0.450491 18.186 0.45049 17.6711 0.768089 17.3535L17.2326 0.889028C17.5502 0.571429 18.0651 0.571429 18.3827 0.889028Z" fill="black"></path>
                </svg>
              </button>
              <button class="navigation-arrows nav-next" onclick="nextMedia()">
                <svg width="20" height="36" viewBox="0 0 20 36" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M1.23255 34.9682C0.914956 34.6506 0.914956 34.1356 1.23255 33.818L17.122 17.9286L1.23255 2.03922C0.914948 1.72162 0.914949 1.20669 1.23255 0.889092C1.55015 0.571493 2.06507 0.571493 2.38267 0.889092L18.8471 17.3536C19.1647 17.6712 19.1647 18.1861 18.8471 18.5037L2.38268 34.9681C2.06508 35.2857 1.55015 35.2857 1.23255 34.9682Z" fill="black"></path>
                </svg>
              </button>
            {% endif %}

            {% for media in product.media %}
              <div
                class="main-media-item {% if forloop.first %}active{% endif %}"
                data-media-index="{{ forloop.index0 }}"
              >
                {% case media.media_type %}
                  {% when 'image' %}
                    <img
                      src="{{ media | image_url: width: 800 }}"
                      alt="{{ media.alt | escape }}"
                      width="800"
                      height="800"
                      loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                    >
                  {% when 'video' %}
                    <video
                      preload="metadata"
                      muted
                      playsinline
                      autoplay
                      loop
                      controls
                      controlslist="nodownload"
                      data-media-id="{{ media.id }}"
                      poster="{{ media.preview_image | image_url: width: 800 }}"
                    >
                      {% for source in media.sources %}
                        <source src="{{ source.url }}" type="{{ source.mime_type }}">
                      {% endfor %}
                    </video>
                  {% when 'external_video' %}
                    <div class="external-video">
                      {{ media | external_video_tag }}
                    </div>
                  {% when 'model' %}
                    <div class="model-viewer">
                      {{ media | model_viewer_tag }}
                    </div>
                {% endcase %}
              </div>
            {% endfor %}
          </div>
        </div>
      </div>

      <!-- Product Info -->
      <div class="product-info">
        <h1 class="text-6xl mb-4 leading-tight">{{ product.title }}</h1>

        <!-- Reviews -->
        {% if product.metafields.reviews.rating %}
          <div class="product-reviews mb-4 flex items-center gap-2">
            <div class="stars flex">
              {% assign rating = product.metafields.reviews.rating | plus: 0 %}
              {% for i in (1..5) %}
                <span class="star {% if i <= rating %}filled{% endif %}">★</span>
              {% endfor %}
            </div>
            <span class="review-count text-sm">({{ product.metafields.reviews.count | default: 2 }})</span>
          </div>
        {% endif %}
        {% if product.tags.size > 0 %}
          <div class="product-tags mb-4 flex items-center gap-2">
            <div class="tags flex gap-3">
              {% for tag in product.tags %}
                <span class="tag bg-[#e9dbc0] px-2 py-1 font-[SofiaPro-Regular] text-sm rounded-full flex items-center justify-center">
                  {{- tag -}}
                </span>
              {% endfor %}
            </div>
          </div>
        {% endif %}

        <div class="product-description font-[SofiaPro-Regular] mb-6 text-gray-700">
          {{ product.description }}
        </div>

        <div class="product-price mb-8">
          <span class="text-3xl font-bold">{{ product.price | money }}</span>
          {% if product.compare_at_price > product.price %}
            <span class="text-xl text-gray-500 line-through ml-3">{{ product.compare_at_price | money }}</span>
          {% endif %}
        </div>

        {% assign current_variant = product.selected_or_first_available_variant %}
        <form
          action="{{ routes.cart_add_url }}"
          data-id="{{ current_variant.id }}"
          method="post"
          enctype="multipart/form-data"
          class="product-form"
        >
          {% unless product.has_only_default_variant %}
            <div class="product-variants mb-6">
              {% for option in product.options_with_values %}
                <div class="variant-option mb-6">
                  <label class="!hidden text-lg font-medium mb-3">{{ option.name }}</label>
                  <div class="variant-buttons flex flex-wrap gap-2">
                    {% for value in option.values %}
                      <button
                        type="button"
                        class="variant-btn font-[SofiaPro-Regular] {% if forloop.first %}active{% endif %} px-4 py-2 border border-gray-300 rounded-lg hover:border-black transition-colors"
                        data-option-index="{{ forloop.parentloop.index }}"
                        data-option-value="{{ value | escape }}"
                      >
                        {{ value }}
                      </button>
                    {% endfor %}
                  </div>
                </div>
              {% endfor %}
            </div>
          {% endunless %}

          <div class="quantity-and-cart flex items-center gap-4 mb-8">
            <div class="quantity-selector">
              <div class="flex items-center bg-white rounded-full h-full">
                <button type="button" class="font-[SofiaPro-Regular] quantity-btn minus w-12 h-12 transition-colors">
                  -
                </button>
                <input
                  type="number"
                  name="quantity"
                  value="1"
                  min="1"
                  class="font-[SofiaPro-Regular] quantity-input w-16 h-12 text-center border-0"
                >
                <button
                  type="button"
                  class="font-[SofiaPro-Regular] quantity-btn plus w-12 h-12 transition-colors"
                >
                  +
                </button>
              </div>
            </div>

            <button
              type="submit"
              class="font-[SofiaPro-Regular] add-to-cart-btn flex-1 bg-red-500 text-white py-4 px-8 rounded-full hover:bg-red-600 transition-colors font-medium text-lg"
            >
              ADD TO BAG
            </button>
          </div>

          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
          <div>
            {% render 'love-it' %}
          </div>
          <div>
            {% render 'product-faq' %}
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<script>
let currentMediaIndex = 0;
let thumbnailScrollPosition = 0;
const totalMedia = {{ product.media.size }};
const THUMBNAIL_HEIGHT = 98; // 80px height + 8px gap

$(document).ready(function() {
  // Initialize thumbnail scrolling
  initThumbnailScrolling();
  
  // Quantity controls
  $('.quantity-btn').on('click', function() {
    const $input = $(this).siblings('.quantity-input');
    let currentVal = parseInt($input.val()) || 1;
    
    if ($(this).hasClass('minus') && currentVal > 1) {
      $input.val(currentVal - 1);
    } else if ($(this).hasClass('plus')) {
      $input.val(currentVal + 1);
    }
  });
  
  // Variant button selection
  $('.variant-btn').on('click', function() {
    // Remove active class from siblings
    $(this).siblings('.variant-btn').removeClass('active');
    // Add active class to clicked button
    $(this).addClass('active');
    
    // Update variant
    updateVariant();
  });
  
  // Video event handlers
  $('video').each(function() {
    const video = this;
    
    // Auto-play first video if it's the active one
    if ($(this).closest('.main-media-item').hasClass('active')) {
      setTimeout(() => {
        video.play().catch(e => {
          console.log('Auto-play prevented:', e);
        });
      }, 500);
    }
    
    // Handle video errors
    $(this).on('error', function() {
      console.log('Video load error:', this.error);
    });
    
    // Handle video loaded
    $(this).on('loadeddata', function() {
      console.log('Video loaded successfully');
    });
  });
});

function showMedia(index) {
  currentMediaIndex = index;
  
  // Hide all media items
  $('.main-media-item').removeClass('active');
  $('.thumbnail-item').removeClass('active');
  
  // Show selected media
  $(`.main-media-item[data-media-index="${index}"]`).addClass('active');
  $(`.thumbnail-item[data-media-index="${index}"]`).addClass('active');
  
  // Auto-scroll to active thumbnail
  scrollToActiveThumbnail(index);
  
  // Pause all videos when switching
  $('video').each(function() {
    this.pause();
    this.currentTime = 0;
  });
  
  // Auto-play the current video if it exists
  const currentVideo = $(`.main-media-item[data-media-index="${index}"] video`)[0];
  if (currentVideo) {
    setTimeout(() => {
      currentVideo.play().catch(e => {
        console.log('Auto-play prevented:', e);
      });
    }, 100);
  }
}

function scrollToActiveThumbnail(index) {
  const $container = $('#thumbnailsContainer');
  const $thumbnails = $('.product-thumbnails');
  const containerHeight = $thumbnails.height();
  const contentHeight = $container[0].scrollHeight;
  const maxScroll = contentHeight - containerHeight;
  
  if (maxScroll <= 0) return; // No need to scroll if content fits
  
  // Calculate desired position to center the active thumbnail
  const targetPosition = index * THUMBNAIL_HEIGHT - (containerHeight / 2) + (THUMBNAIL_HEIGHT / 2);
  
  // Clamp to valid scroll range
  thumbnailScrollPosition = Math.max(0, Math.min(maxScroll, targetPosition));
  
  $container.css('transform', `translateY(-${thumbnailScrollPosition}px)`);
  updateScrollButtons();
}

function nextMedia() {
  currentMediaIndex = (currentMediaIndex + 1) % totalMedia;
  showMedia(currentMediaIndex);
}

function previousMedia() {
  currentMediaIndex = (currentMediaIndex - 1 + totalMedia) % totalMedia;
  showMedia(currentMediaIndex);
}

function updateVariant() {
  const options = [];
  $('.variant-btn.active').each(function() {
    options.push($(this).data('option-value'));
  });
  
  // Find matching variant
  const variants = {{ product.variants | json }};
  const matchingVariant = variants.find(variant => {
    return variant.options.every((option, index) => option === options[index]);
  });
  
  if (matchingVariant) {
    // Update hidden input
    $('input[name="id"]').val(matchingVariant.id);
    
    // Update price
    $('.product-price span:first-child').text(formatMoney(matchingVariant.price));
    
    // Update compare at price
    if (matchingVariant.compare_at_price && matchingVariant.compare_at_price > matchingVariant.price) {
      let $comparePrice = $('.product-price .line-through');
      if ($comparePrice.length) {
        $comparePrice.text(formatMoney(matchingVariant.compare_at_price));
      } else {
        $('.product-price').append(`<span class="text-xl text-gray-500 line-through ml-3">${formatMoney(matchingVariant.compare_at_price)}</span>`);
      }
    } else {
      $('.product-price .line-through').remove();
    }
    
    // Update availability
    if (matchingVariant.available) {
      $('.add-to-cart-btn').prop('disabled', false).text('ADD TO BAG');
    } else {
      $('.add-to-cart-btn').prop('disabled', true).text('SOLD OUT');
    }
    
    // Update afterpay amount
    const afterpayAmount = (matchingVariant.price / 400).toFixed(2);
    $('.payment-info strong:first-child').text(`$${afterpayAmount}`);
  }
}

function formatMoney(cents) {
  return Shopify.formatMoney ? Shopify.formatMoney(cents) : '$' + (cents / 100).toFixed(2);
}

// Keyboard navigation
$(document).keydown(function(e) {
  if (e.keyCode === 37) { // Left arrow
    previousMedia();
  } else if (e.keyCode === 39) { // Right arrow
    nextMedia();
  }
});

// Thumbnail scrolling functions
function initThumbnailScrolling() {
  const $container = $('#thumbnailsContainer');
  const $thumbnails = $('.product-thumbnails');
  const containerHeight = $thumbnails.height();
  const contentHeight = $container[0].scrollHeight;
  
  // Show scroll buttons if content is taller than container
  if (contentHeight > containerHeight) {
    $('.thumbnail-scroll-btn').addClass('visible');
  }
  
  // Update button states
  updateScrollButtons();
}

function scrollThumbnails(direction) {
  const $container = $('#thumbnailsContainer');
  const containerHeight = $('.product-thumbnails').height();
  const contentHeight = $container[0].scrollHeight;
  const maxScroll = contentHeight - containerHeight;
  
  if (direction === 'up') {
    thumbnailScrollPosition = Math.max(0, thumbnailScrollPosition - THUMBNAIL_HEIGHT * 2);
  } else {
    thumbnailScrollPosition = Math.min(maxScroll, thumbnailScrollPosition + THUMBNAIL_HEIGHT * 2);
  }
  
  $container.css('transform', `translateY(-${thumbnailScrollPosition}px)`);
  updateScrollButtons();
}

function updateScrollButtons() {
  const $container = $('#thumbnailsContainer');
  const containerHeight = $('.product-thumbnails').height();
  const contentHeight = $container[0].scrollHeight;
  const maxScroll = contentHeight - containerHeight;
  
  // Update up button
  if (thumbnailScrollPosition <= 0) {
    $('.scroll-up').removeClass('visible');
  } else {
    $('.scroll-up').addClass('visible');
  }
  
  // Update down button
  if (thumbnailScrollPosition >= maxScroll) {
    $('.scroll-down').removeClass('visible');
  } else if (maxScroll > 0) {
    $('.scroll-down').addClass('visible');
  }
}

// Enhanced sticky behavior
$(window).on('scroll', function() {
  if ($(window).width() >= 1024) {
    const windowHeight = $(window).height();
    const productInfo = $('.product-info');
    const productInfoHeight = productInfo[0].scrollHeight;
    
    // If product info is taller than viewport, allow internal scrolling
    if (productInfoHeight > windowHeight - 64) {
      productInfo.css('overflow-y', 'auto');
    } else {
      productInfo.css('overflow-y', 'visible');
    }
  }
});

// Initialize on page load
$(window).trigger('scroll');
</script>

{% schema %}
{
  "name": "Product Main",
  "tag": "section",
  "class": "product-main-section",
  "settings": [
    {
      "type": "header",
      "content": "Product Display Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_zoom",
      "label": "Enable image zoom on hover",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_video_autoplay",
      "label": "Auto-play videos when selected",
      "default": false
    },
    {
      "type": "select",
      "id": "thumbnail_position",
      "label": "Thumbnail position",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "bottom",
          "label": "Bottom"
        }
      ],
      "default": "left"
    }
  ],
  "presets": [
    {
      "name": "Product Main"
    }
  ]
}
{% endschema %}
