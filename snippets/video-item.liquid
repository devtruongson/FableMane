<div class="video-item relative rounded-2xl overflow-hidden bg-black shadow-lg group"></div>
  <!-- Video Element -->
  <video
    class="w-full h-full object-cover"
    autoplay
    loop
    muted
    playsinline
    preload="metadata"
    {% if video_url %}
      src="{{ video_url }}"
    {% endif %}
  >
    {% if video_url %}
      <source src="{{ video_url }}" type="video/mp4">
    {% endif %}
    Your browser does not support the video tag.
  </video>

  <!-- Video Overlay Controls -->
  <div class="absolute inset-0 flex flex-col justify-between p-4 pointer-events-none">
    <!-- Top Controls -->
    <div class="flex justify-end pointer-events-auto">
      <!-- Mute/Unmute Button -->
      <button 
        type="button" 
        class="mute-toggle w-10 h-10 bg-black bg-opacity-50 hover:bg-opacity-70 text-white rounded-full flex items-center justify-center transition-all duration-200 backdrop-blur-sm"
        onclick="toggleMute(this)"
        aria-label="Toggle sound"
      >
        <!-- Muted Icon (default) -->
        <svg class="mute-icon w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" clip-rule="evenodd"/>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"/>
        </svg>
        
        <!-- Unmuted Icon (hidden by default) -->
        <svg class="unmute-icon w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"/>
        </svg>
      </button>
    </div>

    <!-- Bottom Overlay - Subtitles/Caption -->
    <div class="text-center pointer-events-none">
      {% if caption %}
        <div class="inline-block bg-black bg-opacity-60 backdrop-blur-sm rounded-lg px-4 py-2 max-w-xs mx-auto">
          <p class="text-white text-sm font-medium leading-relaxed">
            {{ caption }}
          </p>
        </div>
      {% endif %}
    </div>
  </div>

  <!-- Play/Pause Overlay (appears on hover/click) -->
  <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
    <button 
      type="button" 
      class="play-pause-btn w-16 h-16 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full flex items-center justify-center transition-all duration-200 backdrop-blur-sm pointer-events-auto"
      onclick="togglePlayPause(this)"
      aria-label="Toggle play/pause"
    >
      <!-- Play Icon (hidden by default since video autoplays) -->
      <svg class="play-icon w-8 h-8 text-white hidden" fill="currentColor" viewBox="0 0 24 24">
        <path d="M8 5v14l11-7z"/>
      </svg>
      
      <!-- Pause Icon (visible by default) -->
      <svg class="pause-icon w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
      </svg>
    </button>
  </div>

  <!-- Loading Overlay -->
  <div class="loading-overlay absolute inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 hidden">
    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
  </div>
</div>

<script>
function toggleMute(button) {
  const videoItem = button.closest('.video-item');
  const video = videoItem.querySelector('video');
  const muteIcon = button.querySelector('.mute-icon');
  const unmuteIcon = button.querySelector('.unmute-icon');
  
  if (video.muted) {
    video.muted = false;
    muteIcon.classList.add('hidden');
    unmuteIcon.classList.remove('hidden');
  } else {
    video.muted = true;
    muteIcon.classList.remove('hidden');
    unmuteIcon.classList.add('hidden');
  }
}

function togglePlayPause(button) {
  const videoItem = button.closest('.video-item');
  const video = videoItem.querySelector('video');
  const playIcon = button.querySelector('.play-icon');
  const pauseIcon = button.querySelector('.pause-icon');
  
  if (video.paused) {
    video.play();
    playIcon.classList.add('hidden');
    pauseIcon.classList.remove('hidden');
  } else {
    video.pause();
    playIcon.classList.remove('hidden');
    pauseIcon.classList.add('hidden');
  }
}

// Auto-handle video loading states
document.addEventListener('DOMContentLoaded', function() {
  const videos = document.querySelectorAll('.video-item video');
  
  videos.forEach(video => {
    const videoItem = video.closest('.video-item');
    const loadingOverlay = videoItem.querySelector('.loading-overlay');
    
    // Show loading while video is loading
    video.addEventListener('loadstart', () => {
      loadingOverlay?.classList.remove('hidden');
    });
    
    // Hide loading when video can play
    video.addEventListener('canplay', () => {
      loadingOverlay?.classList.add('hidden');
    });
    
    // Handle video errors
    video.addEventListener('error', () => {
      loadingOverlay?.classList.add('hidden');
      console.log('Video failed to load');
    });
  });
});

// Intersection Observer for performance (pause videos when not in view)
if ('IntersectionObserver' in window) {
  const videoObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const video = entry.target.querySelector('video');
      if (entry.isIntersecting) {
        video?.play();
      } else {
        video?.pause();
      }
    });
  }, {
    threshold: 0.5
  });

  document.addEventListener('DOMContentLoaded', function() {
    const videoItems = document.querySelectorAll('.video-item');
    videoItems.forEach(item => videoObserver.observe(item));
  });
}
</script>

<style>
.video-item {
  aspect-ratio: 9/16; /* TikTok-style vertical video */
  max-width: 400px;
  width: 100%;
  position: relative;
}

.video-item video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Smooth transitions for all interactive elements */
.video-item button {
  transition: all 0.2s ease-in-out;
}

.video-item button:hover {
  transform: scale(1.05);
}

/* Custom scrollbar for mobile */
@media (max-width: 768px) {
  .video-item {
    max-width: 100%;
    border-radius: 1rem;
  }
}

/* Accessibility improvements */
@media (prefers-reduced-motion: reduce) {
  .video-item video {
    animation: none;
  }
  
  .video-item button {
    transition: none;
  }
}
</style>
